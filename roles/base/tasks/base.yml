---
- name: Check if ntpip are defined and not empty
  assert:
    that:
      - ntpip is defined and ntpip != ''
    fail_msg: "Required variables ntpip are not defined or are empty"
  when:
    - inventory_hostname in groups['master0']
    - not enable_local_ntp_server | bool

- name: Set timezone to Asia/Shanghai
  command: timedatectl set-timezone Asia/Shanghai

#- name: Stop and disable firewalld
#  when: inventory_hostname in groups['k8s']
#  service:
#    name: firewalld
#    state: stopped
#    enabled: no

- name: Check SELinux status
  command: getenforce
  register: selinux_status
  ignore_errors: true
  when:
    - ansible_distribution == "CentOS"

- name: Disable SELinux if enabled
  selinux:
    state: disabled
  when:
    - ansible_distribution == "CentOS"
    - selinux_status.stdout != "Disabled"

##  host file add record
- name: modify /etc/hosts
  when: inventory_hostname  in groups['k8s']
  lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].inventory_hostname }} {{ hostvars[item].hostname }}"
    state: present
  loop: "{{ play_hosts }}"

- name: Copy unzip .deb packages to target host for unarchive
  copy:
    src: "unzip.{{ansible_architecture}}.deb"
    dest: "{{work_home}}/unzip.{{ansible_architecture}}.deb"
    mode: 0755
  when:
    - ansible_distribution == "Ubuntu"

- name: Install unzip .deb packages
  shell: dpkg -i {{work_home}}/unzip.{{ansible_architecture}}.deb  # 执行dpkg命令安装deb包
  args:
    executable: /bin/bash
  register: apt_output
  when:
    - ansible_distribution == "Ubuntu"

- name: Display unzip apt output
  debug:
    msg: "{{apt_output}}"
  when:
    - ansible_distribution == "Ubuntu"

- name: cp nameserver sh file
  when: inventory_hostname  in groups['k8s']
  copy: "src=nameserver.sh dest={{work_home}}/nameserver.sh"

## 6. rename hostname which dependents on dns hostfile
- name: Change the hostname to our standard
  when: inventory_hostname  in groups['k8s']
  hostname:
    name="{{ hostname }}"

## 设置文件权限
- name: set nameserver sh file
  when: inventory_hostname  in groups['k8s']
  file:
    path: "{{work_home}}/nameserver.sh"
    mode: 0755

## resolv.conf 文件被更新了！顺序要调整 在 rename之后;
- name: dns add one nameserver  file
  when: inventory_hostname  in groups['k8s']
  command: "{{work_home}}/nameserver.sh"
  register: namesvr_result

- name: echo namesvr_result
  when: inventory_hostname  in groups['k8s']
  debug:
    msg: "{{namesvr_result}}"

## 5. set ps and ln opt/app log dir
- name: template PS1.sh.j2
  when: inventory_hostname  in groups['k8s']
  template:
    src: "ps1.sh.j2"
    dest: "{{work_home}}/ps1.sh"
    mode: "0755"

- name: exe ps1.sh
  when: inventory_hostname  in groups['k8s']
  command: "{{work_home}}/ps1.sh"
  register: ps1_result

- name: echo ps1_result
  when: inventory_hostname  in groups['k8s']
  debug:
    msg: "{{ps1_result}}"

- name: change sysctl.conf
  when: inventory_hostname  in groups['k8s']
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  with_items:
    - { "name": "net.ipv4.ip_forward", "value": 1 }
    - { "name": "net.ipv4.tcp_max_syn_backlog", "value": 262144 }
    - { "name": "net.ipv4.tcp_max_tw_buckets", "value": 10000 }
#    - { "name": "net.ipv4.tcp_tw_recycle", "value": 1 }
    - { "name": "net.ipv4.tcp_tw_reuse", "value": 1 }
    - { "name": "net.ipv4.tcp_fin_timeout", "value": 30 }
    - { "name": "net.ipv4.tcp_syncookies", "value": 1 }
    - { "name": "net.ipv4.tcp_keepalive_probes", "value": 5 }
    - { "name": "net.ipv4.tcp_syn_retries", "value": 2 }
    - { "name": "net.core.somaxconn", "value": 1024 }


- name: modify security limits
  when: inventory_hostname  in groups['k8s']
  pam_limits:
    dest: "{{item.dest}}"
    domain: "*"
    limit_type: "{{item.limit_type}}"
    limit_item: "{{item.limit_item}}"
    value: "{{item.value}}"
  with_items:
    - {"dest":"/etc/security/limits.conf","limit_type": "soft", "limit_item":"nofile", "value": 655360}
    - {"dest":"/etc/security/limits.conf","limit_type": "hard", "limit_item":"nofile", "value": 655360}
    - {"dest":"/etc/security/limits.conf","limit_type": "hard", "limit_item":"nproc", "value": 131072}
    - {"dest":"/etc/security/limits.conf","limit_type": "soft", "limit_item":"nproc", "value": 131072}
    - {"dest": "/etc/security/limits.d/20-nproc.conf", "limit_type": "soft", "limit_item": "nproc", "value": 131072}

## 针对Ubuntu  domain * 不生效需要 domain为root
- name: modify security limits
  when:
    - inventory_hostname  in groups['k8s']
    - ansible_distribution == "Ubuntu"
  pam_limits:
    dest: "{{item.dest}}"
    domain: "root"
    limit_type: "{{item.limit_type}}"
    limit_item: "{{item.limit_item}}"
    value: "{{item.value}}"
  with_items:
    - {"dest":"/etc/security/limits.conf","limit_type": "soft", "limit_item":"nofile", "value": 655360}
    - {"dest":"/etc/security/limits.conf","limit_type": "hard", "limit_item":"nofile", "value": 655360}
    - {"dest":"/etc/security/limits.conf","limit_type": "hard", "limit_item":"nproc", "value": 131072}
    - {"dest":"/etc/security/limits.conf","limit_type": "soft", "limit_item":"nproc", "value": 131072}

# - name: cp ssh sh file
#   copy: "src=ssh.sh dest={{work_home}}/ssh.sh"
#   when: inventory_hostname  in groups['master0']

# - name: set ssh.sh file
#   file:
#     path: "{{work_home}}/ssh.sh"
#     mode: 0755
#   when: inventory_hostname  in groups['master0']

# ## add ssh pub key  mkdir -p .ssh
# - name:  execute ssh pub key
#   command: "{{work_home}}/ssh.sh"
#   when: inventory_hostname  in groups['master0']

# - name: install ssh key
#   when: inventory_hostname  in groups['k8s']
#   authorized_key:
#     user: root
#     key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"
#     state: present

- name: check file id_rsa.pub exist or not
  stat: path=/root/.ssh/id_rsa.pub
  register: pubkey
  when: inventory_hostname  in groups['master0']

- name: generate ssh_copy key
  shell: ssh-keygen -t rsa -b 4096 -N '' -f ~/.ssh/id_rsa -q
  when: pubkey.stat.exists == False and inventory_hostname  in groups['master0']

- name: copy rsa to local path
  fetch: src=/root/.ssh/id_rsa.pub dest=/root/
  when: inventory_hostname  in groups['master0']

- name: install ssh key
  authorized_key:
    user: root
    key: "{{ lookup('file', '/root/{{inventory_hostname}}/root/.ssh/id_rsa.pub')}}"
    state: present
  when: inventory_hostname in groups['master0']

## 3. install nfs pkg
- name: nfs dir
  when: inventory_hostname  in groups['k8s']
  file:
    path: /tmp/nfs
    state: directory

- name: unarchive nfs files
  when:
    - inventory_hostname  in groups['k8s']
    - ansible_distribution == "CentOS"
  unarchive:
    src: "nfs-server.{{ansible_architecture}}.tar.gz"
    dest:  "/tmp/nfs"

- name: unarchive nfs files
  when:
    - inventory_hostname  in groups['k8s']
    - ansible_distribution is search("Kylin")
  copy:
    src: "nfs-utils-2.5.1-5.ky10.{{ansible_architecture}}.rpm"
    dest:  "/tmp/nfs"

- name: unarchive openEuler nfs files
  when:
    - inventory_hostname  in groups['k8s']
    - ansible_distribution == "openEuler"
  unarchive:
    src: "nfs.openeuler.x86_64.tar.gz"
    dest:  "/tmp"
    mode: 0755

- name: Install nfs  packages
  when:
    - inventory_hostname  in groups['k8s']
    - ansible_distribution == "CentOS"
  command: "rpm -ivh /tmp/nfs/nfs-server/*.rpm  --force "

- name: Install nfs  packages
  when:
    - inventory_hostname  in groups['k8s']
    - ansible_distribution is search("Kylin") or ansible_distribution == "openEuler"
  command: "rpm -ivh /tmp/nfs/*.rpm  --force "

- name: Copy  nfs .deb packages to target host
  unarchive:
    src: "nfs-server.deb.{{ansible_architecture}}.tar.gz"
    dest: "{{work_home}}"
    mode: 0755
  when:
    - inventory_hostname  in groups['k8s']
    - ansible_distribution == "Ubuntu"

- name: Install nfs deb packages
  shell: dpkg -i {{work_home}}/nfs-server/*.deb  # 执行dpkg命令安装deb包
  args:
    executable: /bin/bash
  register: apt_output
  ignore_errors: true # 可以暂时忽略
  when:
    - inventory_hostname  in groups['k8s']
    - ansible_distribution == "Ubuntu"

- name: Display nfs apt output
  debug:
    msg: "{{apt_output}}"
  when:
    - inventory_hostname  in groups['k8s']
    - ansible_distribution == "Ubuntu"